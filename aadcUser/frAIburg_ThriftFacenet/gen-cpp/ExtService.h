/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExtService_H
#define ExtService_H

#include <thrift/TDispatchProcessor.h>
#include "ExtIf_types.h"

namespace ext_iface {

class ExtServiceIf {
 public:
  virtual ~ExtServiceIf() {}
  virtual void ping(std::string& _return, const std::string& sender) = 0;
  virtual void GeAvailableNames(std::vector<std::string> & _return) = 0;
  virtual void rawData(TObjectResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params) = 0;
  virtual bool IsStopped() = 0;
  virtual void AddPerson(const TDataRaw& raw_data, const TImageParams& params) = 0;
  virtual void DriveToPerson(const std::string& name) = 0;
  virtual void GoalReached() = 0;
  virtual bool StartDriving() = 0;
};

class ExtServiceIfFactory {
 public:
  typedef ExtServiceIf Handler;

  virtual ~ExtServiceIfFactory() {}

  virtual ExtServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExtServiceIf* /* handler */) = 0;
};

class ExtServiceIfSingletonFactory : virtual public ExtServiceIfFactory {
 public:
  ExtServiceIfSingletonFactory(const boost::shared_ptr<ExtServiceIf>& iface) : iface_(iface) {}
  virtual ~ExtServiceIfSingletonFactory() {}

  virtual ExtServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExtServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ExtServiceIf> iface_;
};

class ExtServiceNull : virtual public ExtServiceIf {
 public:
  virtual ~ExtServiceNull() {}
  void ping(std::string& /* _return */, const std::string& /* sender */) {
    return;
  }
  void GeAvailableNames(std::vector<std::string> & /* _return */) {
    return;
  }
  void rawData(TObjectResultList& /* _return */, const TransportDef::type /* transport_def */, const TDataRaw& /* raw_data */, const TImageParams& /* params */) {
    return;
  }
  bool IsStopped() {
    bool _return = false;
    return _return;
  }
  void AddPerson(const TDataRaw& /* raw_data */, const TImageParams& /* params */) {
    return;
  }
  void DriveToPerson(const std::string& /* name */) {
    return;
  }
  void GoalReached() {
    return;
  }
  bool StartDriving() {
    bool _return = false;
    return _return;
  }
};

typedef struct _ExtService_ping_args__isset {
  _ExtService_ping_args__isset() : sender(false) {}
  bool sender;
} _ExtService_ping_args__isset;

class ExtService_ping_args {
 public:

  ExtService_ping_args() : sender() {
  }

  virtual ~ExtService_ping_args() throw() {}

  std::string sender;

  _ExtService_ping_args__isset __isset;

  void __set_sender(const std::string& val) {
    sender = val;
  }

  bool operator == (const ExtService_ping_args & rhs) const
  {
    if (!(sender == rhs.sender))
      return false;
    return true;
  }
  bool operator != (const ExtService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_ping_pargs {
 public:


  virtual ~ExtService_ping_pargs() throw() {}

  const std::string* sender;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_ping_result__isset {
  _ExtService_ping_result__isset() : success(false), ioe(false) {}
  bool success;
  bool ioe;
} _ExtService_ping_result__isset;

class ExtService_ping_result {
 public:

  ExtService_ping_result() : success() {
  }

  virtual ~ExtService_ping_result() throw() {}

  std::string success;
  TIoException ioe;

  _ExtService_ping_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_ioe(const TIoException& val) {
    ioe = val;
  }

  bool operator == (const ExtService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const ExtService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_ping_presult__isset {
  _ExtService_ping_presult__isset() : success(false), ioe(false) {}
  bool success;
  bool ioe;
} _ExtService_ping_presult__isset;

class ExtService_ping_presult {
 public:


  virtual ~ExtService_ping_presult() throw() {}

  std::string* success;
  TIoException ioe;

  _ExtService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ExtService_GeAvailableNames_args {
 public:

  ExtService_GeAvailableNames_args() {
  }

  virtual ~ExtService_GeAvailableNames_args() throw() {}


  bool operator == (const ExtService_GeAvailableNames_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_GeAvailableNames_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_GeAvailableNames_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_GeAvailableNames_pargs {
 public:


  virtual ~ExtService_GeAvailableNames_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_GeAvailableNames_result__isset {
  _ExtService_GeAvailableNames_result__isset() : success(false) {}
  bool success;
} _ExtService_GeAvailableNames_result__isset;

class ExtService_GeAvailableNames_result {
 public:

  ExtService_GeAvailableNames_result() {
  }

  virtual ~ExtService_GeAvailableNames_result() throw() {}

  std::vector<std::string>  success;

  _ExtService_GeAvailableNames_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const ExtService_GeAvailableNames_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExtService_GeAvailableNames_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_GeAvailableNames_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_GeAvailableNames_presult__isset {
  _ExtService_GeAvailableNames_presult__isset() : success(false) {}
  bool success;
} _ExtService_GeAvailableNames_presult__isset;

class ExtService_GeAvailableNames_presult {
 public:


  virtual ~ExtService_GeAvailableNames_presult() throw() {}

  std::vector<std::string> * success;

  _ExtService_GeAvailableNames_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtService_rawData_args__isset {
  _ExtService_rawData_args__isset() : transport_def(false), raw_data(false), params(false) {}
  bool transport_def;
  bool raw_data;
  bool params;
} _ExtService_rawData_args__isset;

class ExtService_rawData_args {
 public:

  ExtService_rawData_args() : transport_def((TransportDef::type)0) {
  }

  virtual ~ExtService_rawData_args() throw() {}

  TransportDef::type transport_def;
  TDataRaw raw_data;
  TImageParams params;

  _ExtService_rawData_args__isset __isset;

  void __set_transport_def(const TransportDef::type val) {
    transport_def = val;
  }

  void __set_raw_data(const TDataRaw& val) {
    raw_data = val;
  }

  void __set_params(const TImageParams& val) {
    params = val;
  }

  bool operator == (const ExtService_rawData_args & rhs) const
  {
    if (!(transport_def == rhs.transport_def))
      return false;
    if (!(raw_data == rhs.raw_data))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ExtService_rawData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_rawData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_rawData_pargs {
 public:


  virtual ~ExtService_rawData_pargs() throw() {}

  const TransportDef::type* transport_def;
  const TDataRaw* raw_data;
  const TImageParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_rawData_result__isset {
  _ExtService_rawData_result__isset() : success(false), ioe(false) {}
  bool success;
  bool ioe;
} _ExtService_rawData_result__isset;

class ExtService_rawData_result {
 public:

  ExtService_rawData_result() {
  }

  virtual ~ExtService_rawData_result() throw() {}

  TObjectResultList success;
  TIoException ioe;

  _ExtService_rawData_result__isset __isset;

  void __set_success(const TObjectResultList& val) {
    success = val;
  }

  void __set_ioe(const TIoException& val) {
    ioe = val;
  }

  bool operator == (const ExtService_rawData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const ExtService_rawData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_rawData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_rawData_presult__isset {
  _ExtService_rawData_presult__isset() : success(false), ioe(false) {}
  bool success;
  bool ioe;
} _ExtService_rawData_presult__isset;

class ExtService_rawData_presult {
 public:


  virtual ~ExtService_rawData_presult() throw() {}

  TObjectResultList* success;
  TIoException ioe;

  _ExtService_rawData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ExtService_IsStopped_args {
 public:

  ExtService_IsStopped_args() {
  }

  virtual ~ExtService_IsStopped_args() throw() {}


  bool operator == (const ExtService_IsStopped_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_IsStopped_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_IsStopped_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_IsStopped_pargs {
 public:


  virtual ~ExtService_IsStopped_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_IsStopped_result__isset {
  _ExtService_IsStopped_result__isset() : success(false) {}
  bool success;
} _ExtService_IsStopped_result__isset;

class ExtService_IsStopped_result {
 public:

  ExtService_IsStopped_result() : success(0) {
  }

  virtual ~ExtService_IsStopped_result() throw() {}

  bool success;

  _ExtService_IsStopped_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ExtService_IsStopped_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExtService_IsStopped_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_IsStopped_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_IsStopped_presult__isset {
  _ExtService_IsStopped_presult__isset() : success(false) {}
  bool success;
} _ExtService_IsStopped_presult__isset;

class ExtService_IsStopped_presult {
 public:


  virtual ~ExtService_IsStopped_presult() throw() {}

  bool* success;

  _ExtService_IsStopped_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtService_AddPerson_args__isset {
  _ExtService_AddPerson_args__isset() : raw_data(false), params(false) {}
  bool raw_data;
  bool params;
} _ExtService_AddPerson_args__isset;

class ExtService_AddPerson_args {
 public:

  ExtService_AddPerson_args() {
  }

  virtual ~ExtService_AddPerson_args() throw() {}

  TDataRaw raw_data;
  TImageParams params;

  _ExtService_AddPerson_args__isset __isset;

  void __set_raw_data(const TDataRaw& val) {
    raw_data = val;
  }

  void __set_params(const TImageParams& val) {
    params = val;
  }

  bool operator == (const ExtService_AddPerson_args & rhs) const
  {
    if (!(raw_data == rhs.raw_data))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ExtService_AddPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_AddPerson_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_AddPerson_pargs {
 public:


  virtual ~ExtService_AddPerson_pargs() throw() {}

  const TDataRaw* raw_data;
  const TImageParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_AddPerson_result {
 public:

  ExtService_AddPerson_result() {
  }

  virtual ~ExtService_AddPerson_result() throw() {}


  bool operator == (const ExtService_AddPerson_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_AddPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_AddPerson_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_AddPerson_presult {
 public:


  virtual ~ExtService_AddPerson_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtService_DriveToPerson_args__isset {
  _ExtService_DriveToPerson_args__isset() : name(false) {}
  bool name;
} _ExtService_DriveToPerson_args__isset;

class ExtService_DriveToPerson_args {
 public:

  ExtService_DriveToPerson_args() : name() {
  }

  virtual ~ExtService_DriveToPerson_args() throw() {}

  std::string name;

  _ExtService_DriveToPerson_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const ExtService_DriveToPerson_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ExtService_DriveToPerson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_DriveToPerson_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_DriveToPerson_pargs {
 public:


  virtual ~ExtService_DriveToPerson_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_DriveToPerson_result {
 public:

  ExtService_DriveToPerson_result() {
  }

  virtual ~ExtService_DriveToPerson_result() throw() {}


  bool operator == (const ExtService_DriveToPerson_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_DriveToPerson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_DriveToPerson_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_DriveToPerson_presult {
 public:


  virtual ~ExtService_DriveToPerson_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ExtService_GoalReached_args {
 public:

  ExtService_GoalReached_args() {
  }

  virtual ~ExtService_GoalReached_args() throw() {}


  bool operator == (const ExtService_GoalReached_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_GoalReached_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_GoalReached_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_GoalReached_pargs {
 public:


  virtual ~ExtService_GoalReached_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_GoalReached_result {
 public:

  ExtService_GoalReached_result() {
  }

  virtual ~ExtService_GoalReached_result() throw() {}


  bool operator == (const ExtService_GoalReached_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_GoalReached_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_GoalReached_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_GoalReached_presult {
 public:


  virtual ~ExtService_GoalReached_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ExtService_StartDriving_args {
 public:

  ExtService_StartDriving_args() {
  }

  virtual ~ExtService_StartDriving_args() throw() {}


  bool operator == (const ExtService_StartDriving_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtService_StartDriving_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_StartDriving_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_StartDriving_pargs {
 public:


  virtual ~ExtService_StartDriving_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_StartDriving_result__isset {
  _ExtService_StartDriving_result__isset() : success(false) {}
  bool success;
} _ExtService_StartDriving_result__isset;

class ExtService_StartDriving_result {
 public:

  ExtService_StartDriving_result() : success(0) {
  }

  virtual ~ExtService_StartDriving_result() throw() {}

  bool success;

  _ExtService_StartDriving_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ExtService_StartDriving_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExtService_StartDriving_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_StartDriving_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_StartDriving_presult__isset {
  _ExtService_StartDriving_presult__isset() : success(false) {}
  bool success;
} _ExtService_StartDriving_presult__isset;

class ExtService_StartDriving_presult {
 public:


  virtual ~ExtService_StartDriving_presult() throw() {}

  bool* success;

  _ExtService_StartDriving_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExtServiceClient : virtual public ExtServiceIf {
 public:
  ExtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ExtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& sender);
  void send_ping(const std::string& sender);
  void recv_ping(std::string& _return);
  void GeAvailableNames(std::vector<std::string> & _return);
  void send_GeAvailableNames();
  void recv_GeAvailableNames(std::vector<std::string> & _return);
  void rawData(TObjectResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params);
  void send_rawData(const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params);
  void recv_rawData(TObjectResultList& _return);
  bool IsStopped();
  void send_IsStopped();
  bool recv_IsStopped();
  void AddPerson(const TDataRaw& raw_data, const TImageParams& params);
  void send_AddPerson(const TDataRaw& raw_data, const TImageParams& params);
  void recv_AddPerson();
  void DriveToPerson(const std::string& name);
  void send_DriveToPerson(const std::string& name);
  void recv_DriveToPerson();
  void GoalReached();
  void send_GoalReached();
  void recv_GoalReached();
  bool StartDriving();
  void send_StartDriving();
  bool recv_StartDriving();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExtServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ExtServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExtServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GeAvailableNames(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rawData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsStopped(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DriveToPerson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GoalReached(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartDriving(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExtServiceProcessor(boost::shared_ptr<ExtServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ExtServiceProcessor::process_ping;
    processMap_["GeAvailableNames"] = &ExtServiceProcessor::process_GeAvailableNames;
    processMap_["rawData"] = &ExtServiceProcessor::process_rawData;
    processMap_["IsStopped"] = &ExtServiceProcessor::process_IsStopped;
    processMap_["AddPerson"] = &ExtServiceProcessor::process_AddPerson;
    processMap_["DriveToPerson"] = &ExtServiceProcessor::process_DriveToPerson;
    processMap_["GoalReached"] = &ExtServiceProcessor::process_GoalReached;
    processMap_["StartDriving"] = &ExtServiceProcessor::process_StartDriving;
  }

  virtual ~ExtServiceProcessor() {}
};

class ExtServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExtServiceProcessorFactory(const ::boost::shared_ptr< ExtServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ExtServiceIfFactory > handlerFactory_;
};

class ExtServiceMultiface : virtual public ExtServiceIf {
 public:
  ExtServiceMultiface(std::vector<boost::shared_ptr<ExtServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExtServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExtServiceIf> > ifaces_;
  ExtServiceMultiface() {}
  void add(boost::shared_ptr<ExtServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return, const std::string& sender) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, sender);
    }
    ifaces_[i]->ping(_return, sender);
    return;
  }

  void GeAvailableNames(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GeAvailableNames(_return);
    }
    ifaces_[i]->GeAvailableNames(_return);
    return;
  }

  void rawData(TObjectResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rawData(_return, transport_def, raw_data, params);
    }
    ifaces_[i]->rawData(_return, transport_def, raw_data, params);
    return;
  }

  bool IsStopped() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsStopped();
    }
    return ifaces_[i]->IsStopped();
  }

  void AddPerson(const TDataRaw& raw_data, const TImageParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddPerson(raw_data, params);
    }
    ifaces_[i]->AddPerson(raw_data, params);
  }

  void DriveToPerson(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DriveToPerson(name);
    }
    ifaces_[i]->DriveToPerson(name);
  }

  void GoalReached() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GoalReached();
    }
    ifaces_[i]->GoalReached();
  }

  bool StartDriving() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartDriving();
    }
    return ifaces_[i]->StartDriving();
  }

};

} // namespace

#endif
