/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExtIf_TYPES_H
#define ExtIf_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ext_iface {

struct TransportDef {
  enum type {
    IMAGEDATA = 0,
    STRINGDATA = 1
  };
};

extern const std::map<int, const char*> _TransportDef_VALUES_TO_NAMES;

typedef std::vector<class TObjectResult>  TObjectResultList;


class TDataRaw {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TDataRaw() : raw_data() {
  }

  virtual ~TDataRaw() throw() {}

  std::string raw_data;

  void __set_raw_data(const std::string& val) {
    raw_data = val;
  }

  bool operator == (const TDataRaw & rhs) const
  {
    if (!(raw_data == rhs.raw_data))
      return false;
    return true;
  }
  bool operator != (const TDataRaw &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataRaw & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDataRaw &a, TDataRaw &b);


class TObjectResult {
 public:

  static const char* ascii_fingerprint; // = "513303AAC2F1F8ECB57DFD62CE5D219F";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0x33,0x03,0xAA,0xC2,0xF1,0xF8,0xEC,0xB5,0x7D,0xFD,0x62,0xCE,0x5D,0x21,0x9F};

  TObjectResult() : classification(), distance(0), selected(0), bbox_xmin(0), bbox_ymin(0), bbox_xmax(0), bbox_ymax(0) {
  }

  virtual ~TObjectResult() throw() {}

  std::string classification;
  double distance;
  bool selected;
  double bbox_xmin;
  double bbox_ymin;
  double bbox_xmax;
  double bbox_ymax;

  void __set_classification(const std::string& val) {
    classification = val;
  }

  void __set_distance(const double val) {
    distance = val;
  }

  void __set_selected(const bool val) {
    selected = val;
  }

  void __set_bbox_xmin(const double val) {
    bbox_xmin = val;
  }

  void __set_bbox_ymin(const double val) {
    bbox_ymin = val;
  }

  void __set_bbox_xmax(const double val) {
    bbox_xmax = val;
  }

  void __set_bbox_ymax(const double val) {
    bbox_ymax = val;
  }

  bool operator == (const TObjectResult & rhs) const
  {
    if (!(classification == rhs.classification))
      return false;
    if (!(distance == rhs.distance))
      return false;
    if (!(selected == rhs.selected))
      return false;
    if (!(bbox_xmin == rhs.bbox_xmin))
      return false;
    if (!(bbox_ymin == rhs.bbox_ymin))
      return false;
    if (!(bbox_xmax == rhs.bbox_xmax))
      return false;
    if (!(bbox_ymax == rhs.bbox_ymax))
      return false;
    return true;
  }
  bool operator != (const TObjectResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TObjectResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TObjectResult &a, TObjectResult &b);

typedef struct _TImageParams__isset {
  _TImageParams__isset() : name(false) {}
  bool name;
} _TImageParams__isset;

class TImageParams {
 public:

  static const char* ascii_fingerprint; // = "5693FA1A53F649BF7C48D3F739E3EC51";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x93,0xFA,0x1A,0x53,0xF6,0x49,0xBF,0x7C,0x48,0xD3,0xF7,0x39,0xE3,0xEC,0x51};

  TImageParams() : height(0), width(0), bytesPerPixel(0), name() {
  }

  virtual ~TImageParams() throw() {}

  int16_t height;
  int16_t width;
  int16_t bytesPerPixel;
  std::string name;

  _TImageParams__isset __isset;

  void __set_height(const int16_t val) {
    height = val;
  }

  void __set_width(const int16_t val) {
    width = val;
  }

  void __set_bytesPerPixel(const int16_t val) {
    bytesPerPixel = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const TImageParams & rhs) const
  {
    if (!(height == rhs.height))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(bytesPerPixel == rhs.bytesPerPixel))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const TImageParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TImageParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TImageParams &a, TImageParams &b);

typedef struct _TIoException__isset {
  _TIoException__isset() : message(false) {}
  bool message;
} _TIoException__isset;

class TIoException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TIoException() : message() {
  }

  virtual ~TIoException() throw() {}

  std::string message;

  _TIoException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TIoException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIoException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIoException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TIoException &a, TIoException &b);

} // namespace

#endif
