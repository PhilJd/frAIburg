/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ExtIf_types.h"

#include <algorithm>

namespace ext_iface {

int _kTransportDefValues[] = {
  TransportDef::IMAGEDATA,
  TransportDef::STRINGDATA
};
const char* _kTransportDefNames[] = {
  "IMAGEDATA",
  "STRINGDATA"
};
const std::map<int, const char*> _TransportDef_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTransportDefValues, _kTransportDefNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TDataRaw::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t TDataRaw::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t TDataRaw::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raw_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->raw_data);
          isset_raw_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raw_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataRaw::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDataRaw");

  xfer += oprot->writeFieldBegin("raw_data", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->raw_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataRaw &a, TDataRaw &b) {
  using ::std::swap;
  swap(a.raw_data, b.raw_data);
}

const char* TObjectResult::ascii_fingerprint = "513303AAC2F1F8ECB57DFD62CE5D219F";
const uint8_t TObjectResult::binary_fingerprint[16] = {0x51,0x33,0x03,0xAA,0xC2,0xF1,0xF8,0xEC,0xB5,0x7D,0xFD,0x62,0xCE,0x5D,0x21,0x9F};

uint32_t TObjectResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_classification = false;
  bool isset_distance = false;
  bool isset_selected = false;
  bool isset_bbox_xmin = false;
  bool isset_bbox_ymin = false;
  bool isset_bbox_xmax = false;
  bool isset_bbox_ymax = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->classification);
          isset_classification = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->distance);
          isset_distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->selected);
          isset_selected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bbox_xmin);
          isset_bbox_xmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bbox_ymin);
          isset_bbox_ymin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bbox_xmax);
          isset_bbox_xmax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bbox_ymax);
          isset_bbox_ymax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_classification)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_distance)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_selected)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bbox_xmin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bbox_ymin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bbox_xmax)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bbox_ymax)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TObjectResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TObjectResult");

  xfer += oprot->writeFieldBegin("classification", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->classification);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->distance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selected", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->selected);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bbox_xmin", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->bbox_xmin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bbox_ymin", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->bbox_ymin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bbox_xmax", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->bbox_xmax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bbox_ymax", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->bbox_ymax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TObjectResult &a, TObjectResult &b) {
  using ::std::swap;
  swap(a.classification, b.classification);
  swap(a.distance, b.distance);
  swap(a.selected, b.selected);
  swap(a.bbox_xmin, b.bbox_xmin);
  swap(a.bbox_ymin, b.bbox_ymin);
  swap(a.bbox_xmax, b.bbox_xmax);
  swap(a.bbox_ymax, b.bbox_ymax);
}

const char* TImageParams::ascii_fingerprint = "5693FA1A53F649BF7C48D3F739E3EC51";
const uint8_t TImageParams::binary_fingerprint[16] = {0x56,0x93,0xFA,0x1A,0x53,0xF6,0x49,0xBF,0x7C,0x48,0xD3,0xF7,0x39,0xE3,0xEC,0x51};

uint32_t TImageParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_height = false;
  bool isset_width = false;
  bool isset_bytesPerPixel = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->height);
          isset_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->width);
          isset_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->bytesPerPixel);
          isset_bytesPerPixel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_height)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_width)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bytesPerPixel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TImageParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TImageParams");

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bytesPerPixel", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->bytesPerPixel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TImageParams &a, TImageParams &b) {
  using ::std::swap;
  swap(a.height, b.height);
  swap(a.width, b.width);
  swap(a.bytesPerPixel, b.bytesPerPixel);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* TIoException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t TIoException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t TIoException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TIoException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TIoException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TIoException &a, TIoException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

} // namespace
