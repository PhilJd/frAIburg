// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ExtService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ext_iface;

class ExtServiceHandler : virtual public ExtServiceIf {
 public:
  ExtServiceHandler() {
    // Your initialization goes here
  }

  void ping(std::string& _return, const std::string& sender) {
    // Your implementation goes here
    printf("ping\n");
  }

  void GeAvailableNames(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("GeAvailableNames\n");
  }

  void rawData(TObjectResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params) {
    // Your implementation goes here
    printf("rawData\n");
  }

  bool IsStopped() {
    // Your implementation goes here
    printf("IsStopped\n");
  }

  void AddPerson(const TDataRaw& raw_data, const TImageParams& params) {
    // Your implementation goes here
    printf("AddPerson\n");
  }

  void DriveToPerson(const std::string& name) {
    // Your implementation goes here
    printf("DriveToPerson\n");
  }

  void GoalReached() {
    // Your implementation goes here
    printf("GoalReached\n");
  }

  bool StartDriving() {
    // Your implementation goes here
    printf("StartDriving\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ExtServiceHandler> handler(new ExtServiceHandler());
  shared_ptr<TProcessor> processor(new ExtServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

