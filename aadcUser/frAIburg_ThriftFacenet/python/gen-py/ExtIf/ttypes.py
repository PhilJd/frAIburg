#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TransportDef:
  """
  ****************************************************************************
   interface objects
  ****************************************************************************
  """
  IMAGEDATA = 0
  STRINGDATA = 1

  _VALUES_TO_NAMES = {
    0: "IMAGEDATA",
    1: "STRINGDATA",
  }

  _NAMES_TO_VALUES = {
    "IMAGEDATA": 0,
    "STRINGDATA": 1,
  }


class TDataRaw:
  """
  Attributes:
   - raw_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'raw_data', None, None, ), # 1
  )

  def __init__(self, raw_data=None,):
    self.raw_data = raw_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.raw_data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDataRaw')
    if self.raw_data is not None:
      oprot.writeFieldBegin('raw_data', TType.STRING, 1)
      oprot.writeString(self.raw_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.raw_data is None:
      raise TProtocol.TProtocolException(message='Required field raw_data is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TObjectResult:
  """
  Attributes:
   - classification
   - distance
   - selected
   - bbox_xmin
   - bbox_ymin
   - bbox_xmax
   - bbox_ymax
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'classification', None, None, ), # 1
    (2, TType.DOUBLE, 'distance', None, None, ), # 2
    (3, TType.BOOL, 'selected', None, None, ), # 3
    (4, TType.DOUBLE, 'bbox_xmin', None, None, ), # 4
    (5, TType.DOUBLE, 'bbox_ymin', None, None, ), # 5
    (6, TType.DOUBLE, 'bbox_xmax', None, None, ), # 6
    (7, TType.DOUBLE, 'bbox_ymax', None, None, ), # 7
  )

  def __init__(self, classification=None, distance=None, selected=None, bbox_xmin=None, bbox_ymin=None, bbox_xmax=None, bbox_ymax=None,):
    self.classification = classification
    self.distance = distance
    self.selected = selected
    self.bbox_xmin = bbox_xmin
    self.bbox_ymin = bbox_ymin
    self.bbox_xmax = bbox_xmax
    self.bbox_ymax = bbox_ymax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.classification = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.distance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.selected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.bbox_xmin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.bbox_ymin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.bbox_xmax = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.bbox_ymax = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TObjectResult')
    if self.classification is not None:
      oprot.writeFieldBegin('classification', TType.STRING, 1)
      oprot.writeString(self.classification)
      oprot.writeFieldEnd()
    if self.distance is not None:
      oprot.writeFieldBegin('distance', TType.DOUBLE, 2)
      oprot.writeDouble(self.distance)
      oprot.writeFieldEnd()
    if self.selected is not None:
      oprot.writeFieldBegin('selected', TType.BOOL, 3)
      oprot.writeBool(self.selected)
      oprot.writeFieldEnd()
    if self.bbox_xmin is not None:
      oprot.writeFieldBegin('bbox_xmin', TType.DOUBLE, 4)
      oprot.writeDouble(self.bbox_xmin)
      oprot.writeFieldEnd()
    if self.bbox_ymin is not None:
      oprot.writeFieldBegin('bbox_ymin', TType.DOUBLE, 5)
      oprot.writeDouble(self.bbox_ymin)
      oprot.writeFieldEnd()
    if self.bbox_xmax is not None:
      oprot.writeFieldBegin('bbox_xmax', TType.DOUBLE, 6)
      oprot.writeDouble(self.bbox_xmax)
      oprot.writeFieldEnd()
    if self.bbox_ymax is not None:
      oprot.writeFieldBegin('bbox_ymax', TType.DOUBLE, 7)
      oprot.writeDouble(self.bbox_ymax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.classification is None:
      raise TProtocol.TProtocolException(message='Required field classification is unset!')
    if self.distance is None:
      raise TProtocol.TProtocolException(message='Required field distance is unset!')
    if self.selected is None:
      raise TProtocol.TProtocolException(message='Required field selected is unset!')
    if self.bbox_xmin is None:
      raise TProtocol.TProtocolException(message='Required field bbox_xmin is unset!')
    if self.bbox_ymin is None:
      raise TProtocol.TProtocolException(message='Required field bbox_ymin is unset!')
    if self.bbox_xmax is None:
      raise TProtocol.TProtocolException(message='Required field bbox_xmax is unset!')
    if self.bbox_ymax is None:
      raise TProtocol.TProtocolException(message='Required field bbox_ymax is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TImageParams:
  """
  Attributes:
   - height
   - width
   - bytesPerPixel
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'height', None, None, ), # 1
    (2, TType.I16, 'width', None, None, ), # 2
    (3, TType.I16, 'bytesPerPixel', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
  )

  def __init__(self, height=None, width=None, bytesPerPixel=None, name=None,):
    self.height = height
    self.width = width
    self.bytesPerPixel = bytesPerPixel
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.height = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.width = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.bytesPerPixel = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TImageParams')
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I16, 1)
      oprot.writeI16(self.height)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I16, 2)
      oprot.writeI16(self.width)
      oprot.writeFieldEnd()
    if self.bytesPerPixel is not None:
      oprot.writeFieldBegin('bytesPerPixel', TType.I16, 3)
      oprot.writeI16(self.bytesPerPixel)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.height is None:
      raise TProtocol.TProtocolException(message='Required field height is unset!')
    if self.width is None:
      raise TProtocol.TProtocolException(message='Required field width is unset!')
    if self.bytesPerPixel is None:
      raise TProtocol.TProtocolException(message='Required field bytesPerPixel is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TIoException(TException):
  """
  thrown by services

  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TIoException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
